<templateSet group="Angular2 TypeScript Live Templates">
  <template name="a-service" value="import { Injectable } from '@angular/core';&#10;&#10;@Injectable()&#10;export class $Name$Service {&#10;$END$&#10; constructor() { }&#10;}" description="Angular service" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-pipe" value="import { Pipe, PipeTransform } from '@angular/core';&#10;&#10;@Pipe({&#10; name: '$selectorname$'&#10;})&#10;&#10;export class $Name$Pipe implements PipeTransform {&#10; transform(value: any, ...args: any[]): any {&#10;  $END$&#10; }&#10;}" description="Angular pipe" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="selectorname" expression="" defaultValue="&quot;selector-name&quot;" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-default" value="{ path: '', pathMatch: 'full', redirectTo: '$path$' }$END$" description="Angular default route path" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-404" value="{ path: '**', pathMatch: 'full', component: $PathNotFoundComponent$ }$END$" description="Angular 404 route path" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="PathNotFoundComponent" expression="" defaultValue="&quot;PathNotFoundComponent&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-eager" value="{ path: '$path$', component: $Name$Component }," description="Angular eager route path" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-lazy" value="{ path: '$path$', loadChildren: '$lazypath$#$lazymodule$' }," description="Angular lazy route path" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
    <variable name="lazypath" expression="" defaultValue="&quot;lazy-path&quot;" alwaysStopAt="true" />
    <variable name="lazymodule" expression="" defaultValue="&quot;lazy-module&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-http-get" value="return this.http.get('$url$')&#10; .map((response: Response) =&gt; response.json()$END$);" description="Angular Http.get" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="url" expression="" defaultValue="&quot;url&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-service-http" value="import { Injectable } from '@angular/core';&#10;import { Http, Response } from '@angular/http';&#10;import { Observable } from 'rxjs/Observable';&#10;import 'rxjs/add/operator/map';&#10;import 'rxjs/add/operator/catch';&#10;&#10;@Injectable()&#10;export class $ServiceName$Service {&#10; constructor(private http: Http) { }&#10; $END$&#10;}" description="Angular service with Http" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="ServiceName" expression="" defaultValue="&quot;ServiceName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-subscribe" value="this.$service$.$function$&#10; .subscribe($arg$ =&gt; this.$property$ = $arg$);&#10;$END$" description="Angular observable subscribe" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="service" expression="" defaultValue="&quot;service&quot;" alwaysStopAt="true" />
    <variable name="function" expression="" defaultValue="&quot;function&quot;" alwaysStopAt="true" />
    <variable name="arg" expression="" defaultValue="&quot;arg&quot;" alwaysStopAt="true" />
    <variable name="property" expression="" defaultValue="&quot;property&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-module-root" value="import { NgModule } from '@angular/core';&#10;import { BrowserModule  } from '@angular/platform-browser';&#10;import { HttpModule } from '@angular/http';&#10;&#10;import { $App$Component } from './$app$.component';&#10;import { AppRoutingModule } from './$app$.routing'; //TODO: Create $app$.routing&#10;&#10;@NgModule({&#10; imports: [&#10;  BrowserModule,&#10;  HttpModule,&#10; &#10;  AppRoutingModule,&#10; ],&#10; declarations: [$App$Component],&#10; providers: [/* TODO: Providers go here */],&#10; bootstrap: [$App$Component],&#10;})&#10;export class $App$Module { }&#10;$END$" description="Angular Root Module" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="App" expression="" defaultValue="&quot;App&quot;" alwaysStopAt="true" />
    <variable name="app" expression="" defaultValue="&quot;app&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-module-routing" value="import { NgModule } from '@angular/core';&#10;import { Routes, RouterModule } from '@angular/router';&#10;&#10;import { $Name$Component } from './$name$.component';&#10;&#10;const routes: Routes = [&#10;  { path: '$path$', component: $Name$Component },&#10;];&#10;&#10;@NgModule({&#10;  imports: [RouterModule.forChild(routes)],&#10;  exports: [RouterModule],&#10;})&#10;export class $Name$RoutingModule { }&#10;&#10;export const routedComponents = [$Name$Component];" description="Angular routing module file (forChild)" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-module" value="import { NgModule } from '@angular/core';&#10;&#10;import { $Name$Component } from './$name$.component';&#10;&#10;@NgModule({&#10; imports: [],&#10; exports: [],&#10; declarations: [$Name$Component],&#10; providers: [],&#10;})&#10;export class $Name$Module { }&#10;$END$" description="Angular Module" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ctor-skip-self" value="constructor( @Optional() @SkipSelf() parentModule: $ModuleName$ {&#10; if (parentModule) {&#10;  const msg = `$ModuleName$ has already been loaded. &#10;   Import $ModuleName$ once, only, in the root AppModule.`;&#10;  throw new Error(msg);&#10; }&#10;}" description="Angular Module SkipSelf constructor" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="ModuleName" expression="" defaultValue="&quot;ModuleName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rx-observable" value="import { Observable } from 'rxjs/Observable';&#10;$END$" description="RxJS Observable import" toReformat="false" toShortenFQNames="true" deactivated="true">
    <context />
  </template>
  <template name="rx-subject" value="import { Subject } from 'rxjs/Subject';&#10;$END$" description="RxJS Subject import" toReformat="false" toShortenFQNames="true" deactivated="true">
    <context />
  </template>
  <template name="rx-behavior-subject" value="import { BehaviorSubject } from 'rxjs/BehaviorSubject';&#10;$END$" description="RxJS BehaviorSubject import" toReformat="false" toShortenFQNames="true" deactivated="true">
    <context />
  </template>
  <template name="rx-add-operator" value="import 'rxjs/add/operator/$map$';&#10;$END$" description="RxJS Add Operator import" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="map" expression="" defaultValue="&quot;map&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rx-add-observable" value="import 'rxjs/add/observable/$of$';&#10;$END$" description="RxJS Add Observable import" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="of" expression="" defaultValue="&quot;of&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-style" value="[style.$property$]=&quot;$expression$&quot;" description="Angular [style] binding" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="property" expression="" defaultValue="&quot;property&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-routerLink" value="[routerLink]=&quot;['/$routePath$']&quot;$END$" description="Angular routerLink" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="routePath" expression="" defaultValue="&quot;routePath&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-routerLink-param" value="[routerLink]=&quot;['$routePath$', $routeParameterValue$$END$]&quot;" description="Angular routerLink with a route parameter" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="routePath" expression="" defaultValue="&quot;routePath&quot;" alwaysStopAt="true" />
    <variable name="routeParameterValue" expression="" defaultValue="&quot;routeParameterValue&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-select" value="&lt;select [(ngModel)]=&quot;$model$&quot;&gt;&#10; &lt;option *ngFor=&quot;let $item$ of $list$&quot; [value]=&quot;$item$&quot;&gt;{{$item$}}&lt;/option&gt;&#10;&lt;/select&gt;" description="&lt;select&gt; control with ngModel" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="model" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="&quot;list&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngStyle" value="[ngStyle]=&quot;{$style$: $expression$}&quot;" description="Angular ngStyle" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="style" expression="" defaultValue="&quot;style&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-prej" value="&lt;pre&gt;{{$var1$ | json}}&lt;/pre&gt;$var2$" description="Angular pre debug | json" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="var1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="var2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-preja" value="&lt;pre&gt;{{$var1$ | async | json}}&lt;/pre&gt;$var2$" description="Angular pre debug | async | json" toReformat="false" toShortenFQNames="true" deactivated="true">
    <variable name="var1" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <variable name="var2" expression="" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>